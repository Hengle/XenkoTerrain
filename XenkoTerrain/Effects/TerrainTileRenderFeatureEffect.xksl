shader TerrainTileRenderFeatureEffect : PositionVertexTransform, Texturing, NormalStream
{

  stage stream float3 DirectionToLight;
  stage stream float3 surfaceNormal;
  stage stream float3 toCameraVector;  

  cbuffer PerMaterial
  {
    stage float3 LightColor;
    stage float3 LightPosition;
    stage float LightIntensity;
    stage float TextureScale;
    stage float HeightScale;

    stage float SpecularReflectivity;    
    stage float SpecularDamping;
  }

  rgroup PerMaterial
  {    
    stage Texture2D BlendMap;
    stage Texture2D SandTexture;
    stage Texture2D DirtTexture;
    stage Texture2D GrassTexture;    
    stage Texture2D RockTexture;
  }

  stage override void VSMain()
  {
    base.VSMain();
    streams.surfaceNormal = mul(World, float4(streams.meshNormal, 0.0f)).xyz;
    streams.DirectionToLight = LightPosition - streams.PositionWS;
    streams.ShadingPosition = mul(streams.Position, WorldViewProjection);
    streams.toCameraVector = mul(ViewInverse, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz - streams.PositionWS.xyz;
  }

  stage override void PSMain()
  {
    base.PSMain();
    streams.ColorTarget = float4(0,1,0,1);// ComputeTerrainBaseColor();// * ComputeDiffuseLighting();// + ComputeSpecularLighting(); // Cant figure out what I am doing wrong w/Specular :'(
  }

  float4 ComputeDiffuseLighting()
  {
    float3 unitNormal = normalize(streams.surfaceNormal);
    float3 unitLightvector = normalize(streams.DirectionToLight);           
    float nDotl = dot(unitNormal, unitLightvector);
    float brightness = max(nDotl, 0.005f) * LightIntensity; // 0.005f used here is basically fake ambient light for now
    float3 diffuse = brightness * LightColor;        
    return float4(diffuse, 1.0f);
  }

  float4 ComputeSpecularLighting()
  {
    float3 unitVectorToCamera = normalize(streams.toCameraVector);
    float3 lightDirection = -normalize(streams.DirectionToLight);
    float3 reflectedLightDirection = reflect(normalize(lightDirection), normalize(streams.surfaceNormal));
    float specularFactor = max(dot(reflectedLightDirection, unitVectorToCamera), 0.0f);
    float dampedFactor = pow(specularFactor, 10);    
    return float4(SpecularReflectivity * dampedFactor * LightColor , 0.0f);
  }

  float4 ComputeTerrainBaseColor()
  {
    float4 blend = BlendMap.Sample(RepeatSampler, streams.TexCoord);
    float blendTotal = blend.r + blend.g + blend.b;
    float4 sand = SandTexture.Sample(RepeatSampler, streams.TexCoord * TextureScale) * (1-blendTotal);
    float4 grass = GrassTexture.Sample(RepeatSampler, streams.TexCoord * TextureScale)* blend.b;   
    float4 dirt = DirtTexture.Sample(RepeatSampler, streams.TexCoord * TextureScale) * blend.g;
    float4 rock = RockTexture.Sample(RepeatSampler, streams.TexCoord * TextureScale) * blend.r;    
    return sand + grass + dirt + rock;    
  }
};