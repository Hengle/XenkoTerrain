using System;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using Xenko.Core.Mathematics;

namespace XenkoTerrain.TerrainSystem
{
  public class GeometryExporer
  {
    public Task SaveAsync(string path, GeometryData data)
    {
      return Task.Run(() => Save(path, data));
    }

    private async void Save(string path, GeometryData data)
    {
      var vertIdx = 0;
      var uvIdx = 0;
      var normIdx = 0;
      var fileContent = new StringBuilder();

      fileContent.AppendLine("# Generated by XenkoTerrain " + DateTime.Now.ToLongDateString());
      fileContent.AppendLine("# Vertices: " + data.Vertices.Length);
      fileContent.AppendLine("# Size: " + data.Size);
      fileContent.AppendLine("usemtl Terrain");

      for (var row = 0; row < data.TessellationY - 1; row++)
      {
        for (var col = 0; col < data.TessellationX - 1; col++)
        {
          var topLeft = col + row * (int)data.TessellationX;
          var topRight = topLeft + 1;
          var bottomLeft = topLeft + (int)data.TessellationX;
          var bottomRight = bottomLeft + 1;

          var topLeftVertex = data.Vertices[topLeft];
          var topRightVertex = data.Vertices[topRight];
          var bottomLeftVertex = data.Vertices[bottomLeft];
          var botomRightVertex = data.Vertices[bottomRight];

          fileContent.AppendLine("v " + Print(topRightVertex.Position));
          fileContent.AppendLine("v " + Print(topLeftVertex.Position));
          fileContent.AppendLine("v " + Print(bottomLeftVertex.Position));
          fileContent.AppendLine("v " + Print(botomRightVertex.Position));

          fileContent.AppendLine("vn " + Print(topRightVertex.Normal));
          fileContent.AppendLine("vn " + Print(topLeftVertex.Normal));
          fileContent.AppendLine("vn " + Print(bottomLeftVertex.Normal));
          fileContent.AppendLine("vn " + Print(botomRightVertex.Normal));

          fileContent.AppendLine("vt " + Print(data.Size * topRightVertex.TextureCoordinate));
          fileContent.AppendLine("vt " + Print(data.Size * topLeftVertex.TextureCoordinate));
          fileContent.AppendLine("vt " + Print(data.Size * bottomLeftVertex.TextureCoordinate));
          fileContent.AppendLine("vt " + Print(data.Size * botomRightVertex.TextureCoordinate));

          fileContent.AppendLine($"f {++vertIdx}/{++uvIdx}/{++normIdx} {++vertIdx}/{++uvIdx}/{++normIdx} {++vertIdx}/{++uvIdx}/{++normIdx} {++vertIdx}/{++uvIdx}/{++normIdx}");
        }
      }

      using (var streamWriter = new StreamWriter(path))
      {
        await streamWriter.WriteAsync(fileContent.ToString());
      }
    }
    private string Print(Vector2 vector) => $"{vector.X:0.00000} {vector.Y:0.00000}";

    private string Print(Vector3 vector) => $"{vector.X:0.00000} {vector.Y:0.00000} {vector.Z:0.00000}";
  }
}