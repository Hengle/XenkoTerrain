using System;
using System.IO;
using Xenko.Core.Mathematics;

namespace XenkoTerrain.TerrainSystem
{
  public class GeometryExporer
  {
    private string Print(Vector2 vector)
    {
      return $"{vector.X:0.00000} {vector.Y:0.00000}";
    }

    private string Print(Vector3 vector)
    {
      return $"{vector.X:0.00000} {vector.Y:0.00000} {vector.Z:0.00000}";
    }

    public void SaveObj(string path, GeometryData data)
    {
      var vertIdx = 0;
      var uvIdx = 0;
      var normIdx = 0;

      using (var sr = new StreamWriter(path))
      {
        sr.WriteLine("# Generated by XenkoTerrain " + DateTime.Now.ToLongDateString());
        sr.WriteLine("# Vertices: " + data.Vertices.Length);
        sr.WriteLine("# Size: " + data.Size);
        sr.WriteLine("usemtl Terrain");

        for (var row = 0; row < data.TessellationY - 1; row++)
        {
          for (var col = 0; col < data.TessellationX - 1; col++)
          {
            var topLeft = col + row * (int)data.TessellationX;
            var topRight = topLeft + 1;
            var bottomLeft = topLeft + (int)data.TessellationX;
            var bottomRight = bottomLeft + 1;

            var topLeftVertex = data.Vertices[topLeft];
            var topRightVertex = data.Vertices[topRight];
            var bottomLeftVertex = data.Vertices[bottomLeft];
            var botomRightVertex = data.Vertices[bottomRight];

            sr.WriteLine("v " + Print(topRightVertex.Position));
            sr.WriteLine("v " + Print(topLeftVertex.Position));
            sr.WriteLine("v " + Print(bottomLeftVertex.Position));
            sr.WriteLine("v " + Print(botomRightVertex.Position));

            sr.WriteLine("vn " + Print(topRightVertex.Normal));
            sr.WriteLine("vn " + Print(topLeftVertex.Normal));
            sr.WriteLine("vn " + Print(bottomLeftVertex.Normal));
            sr.WriteLine("vn " + Print(botomRightVertex.Normal));

            sr.WriteLine("vt " + Print(data.Size * topRightVertex.TextureCoordinate));
            sr.WriteLine("vt " + Print(data.Size * topLeftVertex.TextureCoordinate));
            sr.WriteLine("vt " + Print(data.Size * bottomLeftVertex.TextureCoordinate));
            sr.WriteLine("vt " + Print(data.Size * botomRightVertex.TextureCoordinate));

            sr.WriteLine($"f {++vertIdx}/{++uvIdx}/{++normIdx} {++vertIdx}/{++uvIdx}/{++normIdx} {++vertIdx}/{++uvIdx}/{++normIdx} {++vertIdx}/{++uvIdx}/{++normIdx}");
          }
        }
      }
    }
  }
}