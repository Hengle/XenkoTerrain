using System;
using System.IO;
using System.Threading.Tasks;

namespace XenkoTerrain.TerrainSystem.Export.Obj
{
  public class GeometryExporerObj
  {
    public async Task SaveAsync(string path, GeometryData data)
    {
      using (var fileContent = new StreamWriter(path))
      {
        await fileContent.WriteLineAsync("# Generated by XenkoTerrain " + DateTime.Now.ToLongDateString());
        await fileContent.WriteLineAsync("# Vertices: " + data.Vertices.Length);
        await fileContent.WriteLineAsync("# Size: " + data.Size);
        await fileContent.WriteLineAsync("usemtl Terrain");

        for (var row = 0; row < data.TessellationY - 1; row++)
        {
          for (var col = 0; col < data.TessellationX - 1; col++)
          {
            var topLeft = col + row * (int)data.TessellationX;
            var topRight = topLeft + 1;
            var bottomLeft = topLeft + (int)data.TessellationX;
            var bottomRight = bottomLeft + 1;
            var topLeftVertex = data.Vertices[topLeft];
            var topRightVertex = data.Vertices[topRight];
            var bottomLeftVertex = data.Vertices[bottomLeft];
            var botomRightVertex = data.Vertices[bottomRight];

            await fileContent.WriteLineAsync(topRightVertex.Position.PrintObj(ObjLineType.Position));
            await fileContent.WriteLineAsync(topLeftVertex.Position.PrintObj(ObjLineType.Position));
            await fileContent.WriteLineAsync(bottomLeftVertex.Position.PrintObj(ObjLineType.Position));
            await fileContent.WriteLineAsync(botomRightVertex.Position.PrintObj(ObjLineType.Position));
            await fileContent.WriteLineAsync(topRightVertex.Normal.PrintObj(ObjLineType.Normal));
            await fileContent.WriteLineAsync(topLeftVertex.Normal.PrintObj(ObjLineType.Normal));
            await fileContent.WriteLineAsync(bottomLeftVertex.Normal.PrintObj(ObjLineType.Normal));
            await fileContent.WriteLineAsync(botomRightVertex.Normal.PrintObj(ObjLineType.Normal));
            await fileContent.WriteLineAsync((data.Size * topRightVertex.TextureCoordinate).PrintObj(ObjLineType.TextureCoordinate));
            await fileContent.WriteLineAsync((data.Size * topLeftVertex.TextureCoordinate).PrintObj(ObjLineType.TextureCoordinate));
            await fileContent.WriteLineAsync((data.Size * bottomLeftVertex.TextureCoordinate).PrintObj(ObjLineType.TextureCoordinate));
            await fileContent.WriteLineAsync((data.Size * botomRightVertex.TextureCoordinate).PrintObj(ObjLineType.TextureCoordinate));
            await fileContent.WriteLineAsync($"f -4/-4/-4 -3/-3/-3 -2/-2/-2 -1/-1/-1 ");
          }
        }
      }
    }
  }
}